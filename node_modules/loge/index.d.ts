/// <reference types="node" />
/** Structural subset of NodeJS.WritableStream required for logging */
export interface WritableStream {
    write(buffer: Buffer | string, cb?: Function): boolean;
    write(str: string, encoding?: string, cb?: Function): boolean;
}
/**
Level is a mapping from level names (strings) to level values (numbers)
*/
export declare enum Level {
    notset = 0,
    debug = 10,
    info = 20,
    warning = 30,
    error = 40,
    critical = 50,
}
export declare class Logger {
    outputStream: WritableStream;
    level: Level;
    /**
     * Create a new Logger instance.
     *
     * @param outputStream Stream-like object implementing .write(string).
     *        E.g., `process.stderr`.
     * @param level Numeric log level indicating the minimum severity of
     *        messages to write to outputStream.
     */
    constructor(outputStream?: WritableStream, level?: Level);
    log(level: Level, args: any[]): void;
    debug(...args: any[]): void;
    info(...args: any[]): void;
    warning(...args: any[]): void;
    error(...args: any[]): void;
    critical(...args: any[]): void;
}
export declare const logger: Logger;
